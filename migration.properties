#
# Contains all needed information used while migrate from RTC to git
# uncomment and change the defaults as needed.
#

# User name and email address for the default git user if not defined
# by the RTC check-in information
#
#user.email=rtc2git@rtc.to
#user.name=RTC 2 git

# Optional - Set encoding of files (For example encoding = UTF-8)
# See "https://github.com/rtcTo/rtc2git/wiki/Encoding" for further instructions
#
#file.encoding=UTF-8

# Optional, defines a baseline name filter
#
# Here you define a regex for baselines that should be tagged in git.
# By default no tags are created.
#
# Example for all baselines
# rtc.baseline.include=^(.*)$
#
#rtc.baseline.include=

# Optional, defines a work item number format to apply on each work item bound to
# the specific RTC changeset (if any)
#
# In case you have migrated your workitems to another issue system (like jira/github/bitbucket)
# by using rtc2jira, you can define a prefix for the commit-message, in order that previously
# linked rtc commits get linked to the new issue system.
#
# Example for a Jira project: AP- (Project has the key AP and is followed by a dash)
# rtc.workitem.number.format=AP-%s
#
# For more detailed information about smart commits see:
# https://confluence.atlassian.com/jiracloud/processing-jira-issues-with-commit-messages-740098538.html
#
#rtc.workitem.number.format=%s

# Optional, defines the delimiter between multiple formatted RTC work item numbers. The default is
# a single space if not defined.
#
#rtc.workitem.number.delimiter=

# Optional commit message search/replace pairs being applied to to commit comment before the
# actual commit. The entries have to be in pairs of commit.message.regex.X/commit.message.replacement.X
# where X must be a unique decimal number.
#
#commit.message.regex.1=^(.*)$
#commit.message.replacement.1=$1

# Optional, defines the final commit message format where as the first parameter represents the
# result of the rtc.workitem.* replacement and the second parameter contains the result of the
# commit.message.* result. The result will be trimmed.
#
#commit.message.format=%1s %2s

# Optional, specifies the line(s) which are added to .gitattributes
# Define a semicolon-separated list of lines
#
# Example:
# gitattributes=# handle text files; * text=auto; *.sql text
#
#gitattributes=

# Ignore big (binary) files
# Define a semicolon-separated list of extensions to be generally ignored
#
# Example:
# ignore.file.extensions=.zip; .jar; .exe; .dll
#
#ignore.file.extensions=

# Optional: global .gitignore entries
# Define a semicolon-separated list of additional .gitignore entries being added
#
# Example:
# global.gitignore.entries=/projectX/WebContent/node_modules; *.ignored
#
#global.gitignore.entries=

# Maximum number of streams to open at a time. Open packs count against the process limits
#
#packedgitopenfiles=128

# Maximum number bytes of heap memory to dedicate to caching pack file data
#
#packedgitlimit=10m

# Size in bytes of a single window read in from the pack file
#
#packedgitwindowsize=8k

# Enables use of Java NIO virtual memory mapping for windows; false reads entire window
# into a byte[] with standard read calls
#
#packedgitmmap=false

# maximum number of bytes to cache in delta base cache for inflated, recently accessed
# objects, without delta chains
#
#deltabasecachelimit=10m

# new byte limit for objects that must be streamed. Objects smaller than this size can be
# obtained as a contiguous byte array, while objects bigger than this size require using an
#
#streamfilethreshold=50m

# Specifies if the Jazzignores should be converted to gitignores
# Default is true
#translate.ignores=true
